{"name":"Aperio","tagline":"3D anatomical/mesh browser using slidable superquadrics as part of an interaction model for exploring and visualizing relationships between structures that are often layered and occlude one another; the system would allow users to fluidly perform cuts, peels, deformations, etc. to easily break apart a system for the purpose of understanding","body":"# ![](https://raw2.github.com/eternallite/MeshIllustrator/master/about_orig.png)Vision  \r\n\r\nAperio is a 3D anatomical or other mesh browser using slidable superquadrics that can be stretched \r\nand placed onto surfaces as a way of marking up areas to be illustratively manipulated \r\n(transformed or deformed in a manner for the purpose of illustration and understanding). \r\n\r\nThe marked areas can be cut, peeled, split, deformed or act as hinges or constraints for exploders etc.\r\nSuperquadrics are defined by both implicit and parametric equations and are easily transformable and bendable making them \r\nideal as selection meshes. Additionally, elements can act as handles on meshes for moving parts out of the way; parts can be transformed in a free-form fashion, constrained like beads on a string, or exploded along a constrained axis.\r\n\r\nThe goal is to develop an intuitive and immediate exploration system using slidable elements (in the form of \r\nsuperquadrics) that lends itself to visual affordance (i.e. users can easily and intuitively combine elements \r\nsuch that they can perform various actions). It is primarily created for users who have little to no prior 3D \r\nmodeling experience and just want to break apart a complicated system for the goal of better understanding \r\nrelationships between parts of the 3D system. \r\n\r\nIt can be used by medical professionals on anatomical data or even be extended for use as an immediate rigging tool on other polygonal meshes. These pages document the use of the application.\r\n\r\n## Important Links (Dependencies)\r\n\r\n   * Written using C++11 (Requires Visual Studio 2013 or higher) <br />\r\n   * Visualization Toolkit 6.1.0 (algorithms and rendering), [www.vtk.org](http://www.vtk.org/) <br />\r\n   * Qt 5.3.1 (GUI), [qt-project.org](http://qt-project.org/) <br />\r\n   * Carve CSG (Latest) (Boolean operations), [carve-csg.com](http://carve-csg.com/) <br />\r\n   * Graphics card with GLSL shader support (OpenGL 2.1 or higher)\r\n\r\n# Installation \r\n<p>\r\n## Precompiled Libraries (Links)\r\n   * QT 5.3.1 - [qt-project.org](qt-project.org) <br />\r\n   * Carve (Nightly) - [docs.google.com/file/d/0B-BzwPAV7QvwdXM5c0FjRmhkcjg](https://docs.google.com/file/d/0B-BzwPAV7QvwdXM5c0FjRmhkcjg)<br />\r\n   * VTK 6.1.0 - [docs.google.com/file/d/0B-BzwPAV7QvwMGlPcU5tUEhDb3c](https://docs.google.com/file/d/0B-BzwPAV7QvwMGlPcU5tUEhDb3c)<br />\r\n   * Optional OBJ data - [docs.google.com/file/d/0B-BzwPAV7QvwR3BwUHQxYlBYZWM](https://docs.google.com/file/d/0B-BzwPAV7QvwR3BwUHQxYlBYZWM)<br />\r\n\r\n## Steps\r\n\r\n``1.   `` Install QT 5.3.1 from [qt-project.org](http://qt-project.org) (recommended version: qt-opensource-windows-x86-msvc2013_opengl-5.3.1)\r\n\r\n>It is also recommend to install Visual Studio Add-in 1.2.3 for Qt5 to work with Qt projects in Visual Studio. (From the same webpage)\r\n\r\n``2.   `` Copy carve from ```carve.zip``` to ```C:\\Program Files (x86)\\carve\\```\r\n\r\n``3.   `` Copy VTK folder from ```VTK.zip``` to ```C:\\Program Files (x86)\\VTK\\```\r\n\r\n``4.   `` The OBJ files are optional and can be placed anywhere.\r\n\r\n``5.   `` Press ```WindowsKey + R``` to open Run command, and type ```sysdm.cpl``` to open system environment variables \r\nGo to Advanced > Environment variables and make a new User Variable, ```PATH``` or if it already exists, \r\nprepend the following path to it : \r\n```C:\\Program Files (x86)\\VTK\\bin\\RelWithDebInfo;C:\\Qt\\Qt5.3.1\\5.3\\msvc2013_opengl\\bin;```\r\n(no spaces between semicolons)\r\n\r\nYou might also need to add an environment variable, QTDIR with the value, ```C:\\Qt\\Qt5.3.1\\5.3\\msvc2013_opengl```\r\n\r\n``6.   `` You can now run the visual studio solution! (Set configuration from ```Debug``` to ```RelWithDebInfo```)\r\n\r\n## Troubleshooting\r\n\r\n(Important) By default, Visual Studio uses the ```Debug``` Heap which is rather slow. To turn this off,  Press ```WindowsKey + R``` to open Run command, and type ```sysdm.cpl``` to open system environment variables Go to advanced > Environment variables and make a new System Variable, ```_NO_DEBUG_HEAP``` and set it to ```1```\r\n\r\nYou may also need to add a version of QT to the QT plugin - Go to the QT5 menu > Qt Options > in the ```Qt Versions``` tab, click Add > Set path to ```C:\\Qt\\Qt5.3.1\\5.3\\msvc2013_opengl``` and click ```Ok```\r\n\r\n### Optional Tools\r\n* Visual Assist 10.8 Visual studio plugin (Code assist)\r\n* Visual Studio Code Maid extension (Shows outline/summary of code)\r\n* Ghostdoc (Simplifies XML code commenting)\r\n* Doxygen (Autogenerates documentation from code comments)\r\n\r\n<p>\r\n&copy; 2011-2014 David Tran ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}